{"version":3,"sources":["Common/Containers/src/Common/Containers/PageHeader.scss","Common/Containers/src/_vars.scss","Common/Containers/src/Common/Containers/PageContent.scss","Common/Components/src/Common/Components/TypeAliasHint.scss","Common/compass-mixins/lib/compass/css3/_shared.scss","Common/compass-mixins/lib/compass/css3/_transform.scss","Common/Components/src/_vars.scss","Common/Containers/src/Common/Containers/Card.scss","Common/Components/src/Common/Components/FunctionSignature.scss","Common/Components/src/Common/Components/FunctionParamDesc.scss","Common/Components/src/Common/Components/MethodCard.scss","Common/Components/src/Common/Components/CodeLink.scss","Common/Components/src/Common/Components/EventCard.scss","Common/Components/src/Common/Components/NavMenuItem.scss","Common/Components/src/Common/Components/NavMenu.scss","Common/Components/src/Common/Components/NavMenuGroup.scss","Common/Containers/src/Common/Containers/App.scss"],"names":[],"mappings":";AAEA,YACC,6BCGyB,YDDzB,kBACA,yBCFsC,aACZ,CDoB1B,eAfC,gBACA,SACA,gBACA,cAAe,CACf,cAGA,QAAS,CACT,oBAGA,kBACA,UACA,OAAQ,C;AErBV,aACC,WAAY,CAKZ,gBAFC,QAAS,C;ACJX,eACC,iBAAkB,CAwDlB,oBArDC,yBACA,WAAY,CAGb,qBACC,kBACA,aACA,SACA,SACA,UCDuD,mCC4Y3B,wHFtY7B,wBACC,kBACA,eACA,kBACA,aACA,mBGrBqC,mBHuBrC,qBGrBwB,CH8CxB,+BAjBC,iBACA,uBACA,yCG/BuB,CHiCvB,6DATA,WACA,cACA,kBACA,YACA,SAIA,kBAAmB,CAanB,8BAJA,iBACA,uBACA,4CG7CoC,CH+CpC,0CAKA,aAAc,C;AItDjB,MACC,WACA,YACA,qBNCyB,CMgBzB,kBAdC,QAAS,CAGV,yBACC,UAAc,CASd,gCANC,wBAAyB,CACzB,2BAGA,cAAe,C;ACjBlB,mBACC,kDFkBqD,eEjBrC,C;ACFjB,mBACC,sBHGyB,aGFX,CAuBd,sBApBC,aACA,wBHJqC,CGKrC,sBAGA,aACA,iBAAkB,CAClB,qBAGA,QAAS,CAKT,uBAFC,eAAgB,CAIlB,0BACC,SAAU,C;ACtBX,wBACC,gBACA,cAAe,CAMf,6BAHC,gBACA,iDJYmD,C;AKnBtD,UACC,cLOoB,iCKLpB,eAAgB,CAShB,gBANC,WAAY,CACZ,gBAGA,aLD0C,C;AMT5C,oBACC,kDNkBqD,eMjBrC,C;ACFjB,aACC,WACA,aACA,gBACA,cACA,qBACA,cPH0B,8EOK1B,mCAAoC,CAcpC,mBAXC,qBPVoC,COarC,qBACC,qBPPmB,wBANkB,COmBrC,2BAFC,yBPVyC,C;AQT5C,SACC,4BRGyB,eQFT,C;ACFjB,cACC,cACA,qBACA,cTA0B,6ESCqD,CAqB/E,gCAlBC,cAAe,CAGhB,qBACC,SACA,+BACA,gBACA,gBACA,WACA,gBACA,wBAAyB,CAGzB,kCAEC,mBAAoB,C;ACpBvB,qBACC,WACA,eAAgB,CAGjB,KACC,SACA,UACA,gEACA,eACA,mBfZgC,aAGN,Cea3B,KACC,aACA,mBACA,UAAW,CAeX,cAZC,WAAY,CAGb,WACC,MAAO,CAOP,aAJC,cACA,gBACA,oBAAqB,C","file":"static/css/style.css","sourcesContent":["@import \"../../vars\";\n\n.PageHeader {\n\tborder-bottom: 1px solid $invertedBorderColor;\n\tpadding: 1em;\n\tposition: relative;\n\tbackground-color: $invertedBackgroundColorActive;\n\tcolor: $invertedTextColor;\n\n\th1 {\n\t\tfont-weight: normal;\n\t\tmargin: 0;\n\t\tfont-size: 1.5em;\n\t\tdisplay: inline;\n\t}\n\n\tp {\n\t\tmargin: 0;\n\t}\n\n\t.Button {\n\t\tposition: absolute;\n\t\tright: 1em;\n\t\ttop: 1em;\n\t}\n}\n","@import \"compass\";\n\n$invertedBackgroundColor: #141414;\n$invertedBackgroundColorHover: #333333;\n$invertedBackgroundColorActive: #242424;\n$invertedTextColor: #b9b9b9;\n$invertedBorderColor: #444;\n$borderColor: #ccc;\n\n$greyAccentColor: #f0f0f0;\n$accentColor: #647d0f;\n$focusAccentColor: lighten($accentColor, 10);\n\n$dangerColor: #ff0000;\n$focusDangerColor: darken($dangerColor, 10);\n\n$twitchColor: #6441A4;\n$focusTwitchColor: lighten($twitchColor, 10);\n\n$successColor: #00cc00;\n\n$codeFonts: Monaco, Menlo, \"Lucida Console\", monospace;\n\n@mixin button() {\n\tdisplay: inline-block;\n\tpadding: .4em .8em;\n\tborder-radius: 5px;\n\tcursor: pointer;\n\t@include user-select(none);\n}\n","@import \"../../vars\";\n\n.PageContent {\n\tpadding: 1em;\n\n\th2 {\n\t\tmargin: 0;\n\t}\n}\n","@import \"../../vars\";\n\n.TypeAliasHint {\n\tposition: relative;\n\n\t> abbr {\n\t\tborder-bottom: 1px dashed;\n\t\tcursor: help;\n\t}\n\n\t&__hint {\n\t\tposition: absolute;\n\t\tdisplay: none;\n\t\ttop: 100%;\n\t\tleft: 50%;\n\t\tz-index: 1;\n\t\t@include translateX(-50%);\n\n\t}\n\n\t&__toolTip {\n\t\tposition: relative;\n\t\tmargin-top: 5px;\n\t\tborder-radius: 3px;\n\t\tpadding: .5em;\n\t\tbackground: $invertedBackgroundColorActive;\n\t\twhite-space: nowrap;\n\t\tborder: 1px solid $invertedBorderColor;\n\n\t\t&:before {\n\t\t\tcontent: '';\n\t\t\tdisplay: block;\n\t\t\tposition: absolute;\n\t\t\tbottom: 100%;\n\t\t\tleft: 50%;\n\t\t\tmargin-left: -5px;\n\t\t\tborder-width: 0 5px 5px;\n\t\t\tborder-color: transparent transparent $invertedBorderColor;\n\t\t\tborder-style: solid;\n\t\t}\n\n\t\t&:after {\n\t\t\tcontent: '';\n\t\t\tdisplay: block;\n\t\t\tposition: absolute;\n\t\t\tbottom: 100%;\n\t\t\tleft: 50%;\n\t\t\tmargin-left: -4px;\n\t\t\tborder-width: 0 4px 4px;\n\t\t\tborder-color: transparent transparent $invertedBackgroundColorActive;\n\t\t\tborder-style: solid;\n\t\t}\n\t}\n\n\t&:hover {\n\t\t> .TypeAliasHint__hint {\n\t\t\tdisplay: block;\n\t\t}\n\t}\n}\n","@import \"../support\";\n\n// This mixin provides basic support for CSS3 properties and\n// their corresponding experimental CSS2 properties when\n// the implementations are identical except for the property\n// prefix.\n@mixin experimental($property, $value,\n  $moz      : $experimental-support-for-mozilla,\n  $webkit   : $experimental-support-for-webkit,\n  $o        : $experimental-support-for-opera,\n  $ms       : $experimental-support-for-microsoft,\n  $khtml    : $experimental-support-for-khtml,\n  $official : true\n) {\n  @if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }\n  @if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }\n  @if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }\n  @if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }\n  @if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }\n  @if $official                                        {         #{$property} : $value; }\n}\n\n// Same as experimental(), but for cases when the property is the same and the value is vendorized\n@mixin experimental-value($property, $value,\n  $moz      : $experimental-support-for-mozilla,\n  $webkit   : $experimental-support-for-webkit,\n  $o        : $experimental-support-for-opera,\n  $ms       : $experimental-support-for-microsoft,\n  $khtml    : $experimental-support-for-khtml,\n  $official : true\n) {\n  @if $webkit  and $experimental-support-for-webkit    { #{$property} : -webkit-#{$value}; }\n  @if $khtml   and $experimental-support-for-khtml     { #{$property} :  -khtml-#{$value}; }\n  @if $moz     and $experimental-support-for-mozilla   { #{$property} :    -moz-#{$value}; }\n  @if $ms      and $experimental-support-for-microsoft { #{$property} :     -ms-#{$value}; }\n  @if $o       and $experimental-support-for-opera     { #{$property} :      -o-#{$value}; }\n  @if $official                                        { #{$property} :         #{$value}; }\n}\n","@import \"shared\";\n\n// @doc off\n// Note ----------------------------------------------------------------------\n// Safari, Chrome, and Firefox all support 3D transforms. However,\n// only in the most recent builds. You should also provide fallback 2d support for\n// Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.\n// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)\n// to switch between the two support lists. The toggle defaults to 'false' (2D),\n// and also accepts 'true' (3D). Currently the lists are as follows:\n// 2D: Mozilla, Webkit, Opera, Official\n// 3D: Webkit, Firefox.\n\n// Available Transforms ------------------------------------------------------\n// - Scale (2d and 3d)\n// - Rotate (2d and 3d)\n// - Translate (2d and 3d)\n// - Skew (2d only)\n\n// Transform Parameters ------------------------------------------------------\n// - Transform Origin (2d and 3d)\n// - Perspective (3d)\n// - Perspective Origin (3d)\n// - Transform Style (3d)\n// - Backface Visibility (3d)\n\n// Mixins --------------------------------------------------------------------\n// transform-origin\n//  - shortcuts:  transform-origin2d, transform-origin3d\n//  - helpers:    apply-origin\n// transform\n//  - shortcuts:  transform2d, transform3d\n//  - helpers:    simple-transform, create-transform\n// perspective\n//  - helpers:    perspective-origin\n// transform-style\n// backface-visibility\n// scale\n//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d\n// rotate\n//  - shortcuts:  rotateX, rotateY, rotate3d\n// translate\n//  - shortcuts:  translateX, translateY, translateZ, translate3d\n// skew\n//  - shortcuts:  skewX, skewY\n\n// Defaults ------------------------------------------------------------------\n// @doc on\n\n// The default x-origin for transforms\n$default-origin-x    : 50%                   !default;\n// The default y-origin for transforms\n$default-origin-y    : 50%                   !default;\n// The default z-origin for transforms\n$default-origin-z    : 50%                   !default;\n\n\n// The default x-multiplier for scaling\n$default-scale-x     : 1.25                  !default;\n// The default y-multiplier for scaling\n$default-scale-y     : $default-scale-x      !default;\n// The default z-multiplier for scaling\n$default-scale-z     : $default-scale-x      !default;\n\n\n// The default angle for rotations\n$default-rotate      : 45deg                 !default;\n\n\n// The default x-vector for the axis of 3d rotations\n$default-vector-x    : 1                     !default;\n// The default y-vector for the axis of 3d rotations\n$default-vector-y    : 1                     !default;\n// The default z-vector for the axis of 3d rotations\n$default-vector-z    : 1                     !default;\n\n\n// The default x-length for translations\n$default-translate-x : 1em                   !default;\n// The default y-length for translations\n$default-translate-y : $default-translate-x  !default;\n// The default z-length for translations\n$default-translate-z : $default-translate-x  !default;\n\n\n// The default x-angle for skewing\n$default-skew-x      : 5deg                  !default;\n// The default y-angle for skewing\n$default-skew-y      : 5deg                  !default;\n\n\n// **Transform-origin**\n// Transform-origin sent as a complete string\n//\n//     @include apply-origin( origin [, 3D-only ] )\n//\n// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates\n// in percentages, absolute (px, cm, in, em etc..) or relative\n// (left, top, right, bottom, center) units\n//\n// @param only3d Set this to true to only apply this\n// mixin where browsers have 3D support.\n@mixin apply-origin($origin, $only3d) {\n  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;\n  @if $only3d {\n    @include experimental(transform-origin, $origin,\n      -moz, -webkit, -o, -ms, not(-khtml), official\n    );\n  } @else {\n    @include experimental(transform-origin, $origin,\n      -moz, -webkit, -o, -ms, not(-khtml), official\n    );\n  }\n}\n\n// Transform-origin sent as individual arguments:\n//\n//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )\n//\n// where the 3 'origin-' arguments represent x/y/z coordinates.\n//\n// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support\n@mixin transform-origin(\n  $origin-x: $default-origin-x,\n  $origin-y: $default-origin-y,\n  $origin-z: false,\n  $only3d:   if($origin-z, true, false)\n) {\n  $origin: unquote('');\n  @if $origin-x or $origin-y or $origin-z {\n    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }\n    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}\n    @if $origin-z { $origin: $origin $origin-z; }\n    @include apply-origin($origin, $only3d);\n  }\n}\n\n\n// Transform sent as a complete string:\n//\n//     @include transform( transforms [, 3D-only ] )\n//\n// where 'transforms' is a space separated list of all the transforms to be applied.\n@mixin transform(\n  $transform,\n  $only3d: false\n) {\n  @if $only3d {\n    @include experimental(transform, $transform,\n      -moz, -webkit, -o, -ms, not(-khtml), official\n    );\n  } @else {\n    @include experimental(transform, $transform,\n      -moz, -webkit, -o, -ms, not(-khtml), official\n    );\n  }\n}\n\n// Shortcut to target all browsers with 2D transform support\n@mixin transform2d($trans) {\n  @include transform($trans, false);\n}\n\n// Shortcut to target only browsers with 3D transform support\n@mixin transform3d($trans) {\n  @include transform($trans, true);\n}\n\n// @doc off\n// 3D Parameters -------------------------------------------------------------\n// @doc on\n\n// Set the perspective of 3D transforms on the children of an element:\n//\n//      @include perspective( perspective )\n//\n// where 'perspective' is a unitless number representing the depth of the\n// z-axis. The higher the perspective, the more exaggerated the foreshortening.\n// values from 500 to 1000 are more-or-less \"normal\" - a good starting-point.\n@mixin perspective($p) {\n  @include experimental(perspective, $p,\n    -moz, -webkit, -o, -ms, not(-khtml), official\n  );\n}\n\n// Set the origin position for the perspective\n//\n//      @include perspective-origin(origin-x [origin-y])\n//\n// where the two arguments represent x/y coordinates\n@mixin perspective-origin($origin: 50%) {\n  @include experimental(perspective-origin, $origin,\n    -moz, -webkit, -o, -ms, not(-khtml), official\n  );\n}\n\n// Determine whether a 3D objects children also live in the given 3D space\n//\n//      @include transform-style( [ style ] )\n//\n// where `style` can be either `flat` or `preserve-3d`.\n// Browsers default to `flat`, mixin defaults to `preserve-3d`.\n@mixin transform-style($style: preserve-3d) {\n  @include experimental(transform-style, $style,\n    -moz, -webkit, -o, -ms, not(-khtml), official\n  );\n}\n\n// Determine the visibility of an element when it's back is turned\n//\n//     @include backface-visibility( [ visibility ] )\n//\n// where `visibility` can be either `visible` or `hidden`.\n// Browsers default to visible, mixin defaults to hidden\n@mixin backface-visibility($visibility: hidden) {\n  @include experimental(backface-visibility, $visibility,\n    -moz, -webkit, -o, -ms, not(-khtml), official\n  );\n}\n\n// @doc off\n// Transform Partials --------------------------------------------------------\n// These work well on their own, but they don't add to each other, they override.\n// Use along with transform parameter mixins to adjust origin, perspective and style\n// ---------------------------------------------------------------------------\n\n\n// Scale ---------------------------------------------------------------------\n// @doc on\n\n// Scale an object along the x and y axis:\n//\n//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )\n//\n// where the 'scale-' arguments are unitless multipliers of the x and y dimensions\n// and perspective, which works the same as the stand-alone perspective property/mixin\n// but applies to the individual element (multiplied with any parent perspective)\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scale(\n  $scale-x:     $default-scale-x,\n  $scale-y:     $scale-x,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: scale($scale-x, $scale-y);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Scale an object along the x axis\n// @include scaleX( [ scale-x, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scaleX(\n  $scale:       $default-scale-x,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: scaleX($scale);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Scale an object along the y axis\n// @include scaleY( [ scale-y, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scaleY(\n  $scale:       $default-scale-y,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: scaleY($scale);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Scale an object along the z axis\n// @include scaleZ( [ scale-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scaleZ(\n  $scale: $default-scale-z,\n  $perspective: false\n) {\n  $trans: scaleZ($scale);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Scale and object along all three axis\n// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scale3d(\n  $scale-x:     $default-scale-x,\n  $scale-y:     $default-scale-y,\n  $scale-z:     $default-scale-z,\n  $perspective: false\n) {\n  $trans: scale3d($scale-x, $scale-y, $scale-z);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// @doc off\n// Rotate --------------------------------------------------------------------\n// @doc on\n\n// Rotate an object around the z axis  (2D)\n// @include rotate( [ rotation, perspective, 3D-only ] )\n// where 'rotation' is an angle set in degrees (deg) or radian (rad) units\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotate(\n  $rotate:      $default-rotate,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: rotate($rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// A longcut for 'rotate' in case you forget that 'z' is implied\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotateZ(\n  $rotate:      $default-rotate,\n  $perspective: false,\n  $only3d:      false\n) {\n  @include rotate($rotate, $perspective, $only3d);\n}\n\n// Rotate an object around the x axis (3D)\n// @include rotateX( [ rotation, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotateX(\n  $rotate: $default-rotate,\n  $perspective: false\n) {\n  $trans: rotateX($rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Rotate an object around the y axis (3D)\n// @include rotate( [ rotation, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotateY(\n  $rotate: $default-rotate,\n  $perspective: false\n) {\n  $trans: rotateY($rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Rotate an object around an arbitrary axis (3D)\n// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )\n// where the 'vector-' arguments accept unitless numbers.\n// These numbers are not important on their own, but in relation to one another\n// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz.\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotate3d(\n  $vector-x: $default-vector-x,\n  $vector-y: $default-vector-y,\n  $vector-z: $default-vector-z,\n  $rotate: $default-rotate,\n  $perspective: false\n) {\n  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// @doc off\n// Translate -----------------------------------------------------------------\n// @doc on\n\n// Move an object along the x or y axis (2D)\n// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )\n// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units.\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translate(\n  $translate-x: $default-translate-x,\n  $translate-y: $default-translate-y,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: translate($translate-x, $translate-y);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Move an object along the x axis (2D)\n// @include translate( [ translate-x, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translateX(\n  $trans-x:     $default-translate-x,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: translateX($trans-x);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Move an object along the y axis (2D)\n// @include translate( [ translate-y, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translateY(\n  $trans-y:     $default-translate-y,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: translateY($trans-y);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Move an object along the z axis (3D)\n// @include translate( [ translate-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translateZ(\n  $trans-z:     $default-translate-z,\n  $perspective: false\n) {\n  $trans: translateZ($trans-z);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Move an object along the x, y and z axis (3D)\n// @include translate( [ translate-x, translate-y, translate-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translate3d(\n  $translate-x: $default-translate-x,\n  $translate-y: $default-translate-y,\n  $translate-z: $default-translate-z,\n  $perspective: false\n) {\n  $trans: translate3d($translate-x, $translate-y, $translate-z);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// @doc off\n// Skew ----------------------------------------------------------------------\n// @doc on\n\n// Skew an element:\n//\n//     @include skew( [ skew-x, skew-y, 3D-only ] )\n//\n// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units.\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin skew(\n  $skew-x: $default-skew-x,\n  $skew-y: $default-skew-y,\n  $only3d: false\n) {\n  $trans: skew($skew-x, $skew-y);\n  @include transform($trans, $only3d);\n}\n\n// Skew an element along the x axiz\n//\n//     @include skew( [ skew-x, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin skewX(\n  $skew-x: $default-skew-x,\n  $only3d: false\n) {\n  $trans: skewX($skew-x);\n  @include transform($trans, $only3d);\n}\n\n// Skew an element along the y axis\n//\n//     @include skew( [ skew-y, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin skewY(\n  $skew-y: $default-skew-y,\n  $only3d: false\n) {\n  $trans: skewY($skew-y);\n  @include transform($trans, $only3d);\n}\n\n\n// Full transform mixins\n// For settings any combination of transforms as arguments\n// These are complex and not highly recommended for daily use. They are mainly\n// here for backward-compatibility purposes.\n//\n// * they include origin adjustments\n// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin create-transform(\n  $perspective: false,\n  $scale-x:     false,\n  $scale-y:     false,\n  $scale-z:     false,\n  $rotate-x:    false,\n  $rotate-y:    false,\n  $rotate-z:    false,\n  $rotate3d:    false,\n  $trans-x:     false,\n  $trans-y:     false,\n  $trans-z:     false,\n  $skew-x:      false,\n  $skew-y:      false,\n  $origin-x:    false,\n  $origin-y:    false,\n  $origin-z:    false,\n  $only3d:      false\n) {\n  $trans: unquote(\"\");\n\n  // perspective\n  @if $perspective { $trans: perspective($perspective) ; }\n\n  // scale\n  @if $scale-x and $scale-y {\n    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }\n    @else { $trans: $trans scale($scale-x, $scale-y); }\n  } @else {\n    @if $scale-x { $trans: $trans scaleX($scale-x); }\n    @if $scale-y { $trans: $trans scaleY($scale-y); }\n    @if $scale-z { $trans: $trans scaleZ($scale-z); }\n  }\n\n  // rotate\n  @if $rotate-x { $trans: $trans rotateX($rotate-x); }\n  @if $rotate-y { $trans: $trans rotateY($rotate-y); }\n  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }\n  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }\n\n  // translate\n  @if $trans-x and $trans-y {\n    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }\n    @else { $trans: $trans translate($trans-x, $trans-y); }\n  } @else {\n    @if $trans-x { $trans: $trans translateX($trans-x); }\n    @if $trans-y { $trans: $trans translateY($trans-y); }\n    @if $trans-z { $trans: $trans translateZ($trans-z); }\n  }\n\n  // skew\n  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }\n  @else {\n    @if $skew-x { $trans: $trans skewX($skew-x); }\n    @if $skew-y { $trans: $trans skewY($skew-y); }\n  }\n\n  // apply it!\n  @include transform($trans, $only3d);\n  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);\n}\n\n\n// A simplified set of options\n// backwards-compatible with the previous version of the 'transform' mixin\n@mixin simple-transform(\n  $scale:    false,\n  $rotate:   false,\n  $trans-x:  false,\n  $trans-y:  false,\n  $skew-x:   false,\n  $skew-y:   false,\n  $origin-x: false,\n  $origin-y: false\n) {\n  @include create-transform(\n    false,\n    $scale, $scale, false,\n    false, false, $rotate, false,\n    $trans-x, $trans-y, false,\n    $skew-x, $skew-y,\n    $origin-x, $origin-y, false,\n    false\n  );\n}\n","@import \"compass\";\n\n$invertedBackgroundColor: #141414;\n$invertedBackgroundColorHover: #333333;\n$invertedBackgroundColorActive: #242424;\n$invertedTextColor: #b9b9b9;\n$invertedBorderColor: #444;\n$borderColor: #ccc;\n\n$greyAccentColor: #f0f0f0;\n$accentColor: #647d0f;\n$focusAccentColor: lighten($accentColor, 10);\n\n$dangerColor: #ff0000;\n$focusDangerColor: darken($dangerColor, 10);\n\n$twitchColor: #6441A4;\n$focusTwitchColor: lighten($twitchColor, 10);\n\n$successColor: #00cc00;\n\n$codeFonts: Monaco, Menlo, \"Lucida Console\", monospace;\n\n@mixin button() {\n\tdisplay: inline-block;\n\tpadding: .4em .8em;\n\tborder-radius: 5px;\n\tcursor: pointer;\n\t@include user-select(none);\n}\n","@import \"../../vars\";\n\n.Card {\n\tmargin: 1em;\n\tpadding: 1em;\n\tborder: 1px solid $invertedBorderColor;\n\n\th3, h4 {\n\t\tmargin: 0;\n\t}\n\n\t&__deprecationNotice {\n\t\tcolor: #aa0000;\n\n\t\tstrong {\n\t\t\ttext-transform: uppercase;\n\t\t}\n\n\t\tp {\n\t\t\tdisplay: inline;\n\t\t}\n\t}\n}\n","@import \"../../vars\";\n\n.FunctionSignature {\n\tfont-family: $codeFonts;\n\tmargin: 0 0 .5em;\n}\n","@import \"../../vars\";\n\n.FunctionParamDesc {\n\tborder: 1px solid $invertedBorderColor;\n\tmargin: .5em 0;\n\n\tth {\n\t\tpadding: .5em;\n\t\tbackground-color: $invertedBackgroundColorActive;\n\t}\n\n\ttd {\n\t\tpadding: .5em;\n\t\ttext-align: center;\n\t}\n\n\tp {\n\t\tmargin: 0;\n\n\t\t+ p {\n\t\t\tmargin-top: .5em;\n\t\t}\n\t}\n\n\t&__check {\n\t\twidth: 1em;\n\t}\n}\n","@import \"../../vars\";\n\n.MethodCard {\n\t&__returnType {\n\t\tfont-weight: bold;\n\t\tmargin: 1em 0 0;\n\n\t\t> span {\n\t\t\tfont-weight: normal;\n\t\t\tfont-family: $codeFonts;\n\t\t}\n\t}\n}\n","@import \"../../vars\";\n\n.CodeLink {\n\tcolor: $accentColor;\n\ttransition: color .3s ease-in-out;\n\tmargin-left: 1em;\n\n\t&__icon {\n\t\twidth: 1.5em;\n\t}\n\n\t&:hover {\n\t\tcolor: $focusAccentColor;\n\t}\n}\n","@import \"../../vars\";\n\n.EventCard__example {\n\tfont-family: $codeFonts;\n\tmargin: 0 0 .5em;\n}\n","@import \"../../vars\";\n\n.NavMenuItem {\n\theight: 1em;\n\tpadding: .5em;\n\tline-height: 1em;\n\tdisplay: block;\n\ttext-decoration: none;\n\tcolor: $invertedTextColor;\n\ttransition: .3s background-color ease-in-out, .3s border-left-color ease-in-out;\n\tborder-left: .25em solid transparent;\n\n\t&:hover {\n\t\tbackground-color: $invertedBackgroundColorHover;\n\t}\n\n\t&--active {\n\t\tborder-color: $accentColor;\n\t\tbackground-color: $invertedBackgroundColorActive;\n\n\t\t&:hover {\n\t\t\tborder-left-color: $focusAccentColor;\n\t\t}\n\t}\n}\n","@import \"../../vars\";\n\n.NavMenu {\n\tborder-right: 1px solid $invertedBorderColor;\n\tmin-height: 100%;\n}\n","@import \"../../vars\";\n\n.NavMenuGroup {\n\tdisplay: block;\n\ttext-decoration: none;\n\tcolor: $invertedTextColor;\n\ttransition: .3s background-color ease-in-out, .3s border-left-color ease-in-out;\n\n\t&:not(:first-child) {\n\t\tmargin-top: 1em;\n\t}\n\n\t&__title {\n\t\tmargin: 0;\n\t\tpadding: .25em .5em .25em .75em;\n\t\tfont-size: 1.1em;\n\t\tline-height: 1em;\n\t\theight: 1em;\n\t\tfont-weight: bold;\n\t\ttext-transform: uppercase;\n\t}\n\n\t&__items {\n\t\t.NavMenuItem {\n\t\t\tpadding-left: 1.25em;\n\t\t}\n\t}\n}\n","@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,700');\n\n@import \"../../vars\";\n\nhtml, body, #root, .App {\n\twidth: 100%;\n\tmin-height: 100%;\n}\n\nbody {\n\tmargin: 0;\n\tpadding: 0;\n\tfont-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\tfont-size: 14px;\n\tbackground: $invertedBackgroundColor;\n\tcolor: $invertedTextColor;\n}\n\n.App {\n\tdisplay: flex;\n\tflex-direction: row;\n\twidth: 100%;\n\n\t.NavMenu {\n\t\twidth: 250px;\n\t}\n\n\t&__main {\n\t\tflex: 1;\n\n\t\ta {\n\t\t\tcolor: darken($invertedTextColor, 20%);\n\t\t\tfont-weight: bold;\n\t\t\ttext-decoration: none;\n\t\t}\n\t}\n}\n"],"sourceRoot":""}